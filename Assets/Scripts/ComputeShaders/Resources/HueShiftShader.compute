// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MyHelpers.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float Shift;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    // wierd git copilot code, cool but not what I want 
   // float4 ShiftedHue = fmod(Result[id.xy] + Shift, 1.0);
    
    float4 ShiftedHue;
    
    ShiftedHue = Result[id.xy];
    
    
    float hueMagnitude = length(Result[id.xy].rgb);
    float3 OColor = Result[id.xy].rgb;
    OColor *= 1.0;
    float3 SinedHue = sin(float3(Shift + OColor.r, OColor.g + Shift + PI * 2.0 / 3.0, OColor.b + Shift + PI * 4.0 / 3.0));
    //float3 SinedHue = sin(float3(Shift,+ Shift + PI * 2.0 / 3.0,+ Shift + PI * 4.0 / 3.0));

  //  SinedHue += 1;
  ////  SinedHue /= 2;
    SinedHue = saturate(SinedHue); 
    //SinedHue = pow(SinedHue, 4); 
    SinedHue += Result[id.xy].rgb * 2;
    SinedHue = normalize(SinedHue) * hueMagnitude;
    ShiftedHue.rgb = SinedHue;
    ShiftedHue.w = Result[id.xy].w; // Preserve alpha channel
  
    Result[id.xy] = ShiftedHue;
}
