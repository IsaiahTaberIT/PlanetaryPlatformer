// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "MyHelpers.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

int BlendMode;
bool DoRotLerp;
float2 Dims;
float Offset;
float4 PrimaryColor;
float4 SecondaryColor;
float Spacing;
float2 Slope;

RWTexture2D<float4> Result;
float DistortionFactor;
RWTexture2D<float4> DistortionTex;

RWTexture2D<float4> SecondaryInputTexture; // SIT
bool OverrideWithMask; // OWM
bool OverridePrimaryColor; // OPC


[numthreads(8, 8, 1)]


void CSMain (uint3 id : SV_DispatchThreadID)
{
    HandleMasking(OverrideWithMask, OverridePrimaryColor, PrimaryColor, SecondaryColor, SecondaryInputTexture[id.xy]);

        
    uint2 DistortedPosition = DistortPos((DistortionTex[id.xy] + 0.5) / 4.0, id.xy, DistortionFactor);

    
    float mod = (((DistortedPosition.x) - Dims.x / 2.0) * Slope.x + ((DistortedPosition.y) - Dims.y / 2.0) * Slope.y + length(Dims) * 10.0 + Offset) % Spacing;
   // bool useRotLerp = true;
    
    if (mod >= Spacing / 2.0)
    {
        Result[id.xy] = Blend(Result[id.xy], PrimaryColor, PrimaryColor.w, BlendMode);
    }
    else
    {
        Result[id.xy] = Blend(Result[id.xy], SecondaryColor, SecondaryColor.w, BlendMode);
    }
        
    
  
  
    
}
